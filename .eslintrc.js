/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/

module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    "plugin:vue/recommended",
    "eslint:recommended",
    "@vue/prettier",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "prettier",
  ],
  globals: {
    Atomics: "readonly",
    SharedArrayBuffer: "readonly",
  },
  parser: "vue-eslint-parser",
  parserOptions: {
    ecmaVersion: 12,
    sourceType: "module",
    parser: "@typescript-eslint/parser",
    project: "./tsconfig.json",
    tsconfigRootDir: "./",
    debugLevel: false,
    extraFileExtensions: [".vue"],
    createDefaultProgram: true,
  },
  plugins: ["vue", "@typescript-eslint"],
  rules: {
    indent: "off",
    "@typescript-eslint/adjacent-overload-signatures": "off",
    "@typescript-eslint/array-type": [
      "off",
      {
        default: "array-simple",
      },
    ],
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/ban-types": [
      "off",
      {
        types: {
          Object: {
            message: "Avoid using the `Object` type. Did you mean `object`?",
          },
          Function: {
            message:
              "Avoid using the `Function` type. Prefer a specific function type, like `() => void`.",
          },
          Boolean: {
            message: "Avoid using the `Boolean` type. Did you mean `boolean`?",
          },
          Number: {
            message: "Avoid using the `Number` type. Did you mean `number`?",
          },
          String: {
            message: "Avoid using the `String` type. Did you mean `string`?",
          },
          Symbol: {
            message: "Avoid using the `Symbol` type. Did you mean `symbol`?",
          },
        },
      },
    ],
    "@typescript-eslint/class-name-casing": "off",
    "@typescript-eslint/consistent-type-assertions": "off",
    "@typescript-eslint/consistent-type-definitions": "off",
    "@typescript-eslint/dot-notation": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-member-accessibility": [
      "off",
      {
        accessibility: "explicit",
      },
    ],
    "@typescript-eslint/explicit-module-boundary-types": "warn",
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/member-delimiter-style": [
      "off",
      {
        multiline: {
          delimiter: "semi",
          requireLast: true,
        },
        singleline: {
          delimiter: "semi",
          requireLast: false,
        },
      },
    ],
    "@typescript-eslint/member-ordering": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-extra-non-null-assertion": "error",
    "@typescript-eslint/no-floating-promises": "warn",
    "@typescript-eslint/no-implied-eval": "error",
    "@typescript-eslint/no-misused-new": "off",
    "@typescript-eslint/no-namespace": "off",
    "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
    "@typescript-eslint/no-parameter-properties": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-return": "error",
    "@typescript-eslint/no-unused-expressions": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/prefer-as-const": "error",
    "@typescript-eslint/prefer-for-of": "off",
    "@typescript-eslint/prefer-function-type": "off",
    "@typescript-eslint/prefer-namespace-keyword": "off",
    "@typescript-eslint/quotes": ["off", "double"],
    "@typescript-eslint/restrict-plus-operands": "warn",
    "@typescript-eslint/restrict-template-expressions": "error",
    "@typescript-eslint/semi": ["off", "always"],
    "@typescript-eslint/triple-slash-reference": [
      "off",
      {
        path: "always",
        types: "prefer-import",
        lib: "always",
      },
    ],
    "@typescript-eslint/type-annotation-spacing": "off",
    "@typescript-eslint/unified-signatures": "off",
    "arrow-parens": ["off", "always"],
    "brace-style": ["off", "1tbs"],
    "comma-dangle": ["off", "always-multiline"],
    complexity: "off",
    "constructor-super": "off",
    eqeqeq: ["off", "smart"],
    "for-direction": "error",
    "getter-return": "error",
    "guard-for-in": "off",
    "id-blacklist": [
      "off",
      "any",
      "Number",
      "number",
      "String",
      "string",
      "Boolean",
      "boolean",
      "Undefined",
      "undefined",
    ],
    "id-match": "off",
    "import/order": "off",
    "jsdoc/check-alignment": "off",
    "jsdoc/check-indentation": "off",
    "jsdoc/newline-after-description": "off",
    "max-classes-per-file": ["off", 1],
    "no-async-promise-executor": "error",
    "no-bitwise": "off",
    "no-caller": "off",
    "no-case-declarations": "error",
    "no-class-assign": "error",
    "no-compare-neg-zero": "error",
    "no-cond-assign": "off",
    "no-console": "off",
    "no-const-assign": "error",
    "no-constant-condition": "error",
    "no-control-regex": "error",
    "no-debugger": "off",
    "no-delete-var": "error",
    "no-dupe-args": "error",
    "no-dupe-class-members": "error",
    "no-dupe-else-if": "error",
    "no-dupe-keys": "error",
    "no-duplicate-case": "error",
    "no-empty": "off",
    "no-empty-character-class": "error",
    "no-empty-pattern": "error",
    "no-eval": "off",
    "no-ex-assign": "error",
    "no-extra-boolean-cast": "error",
    "no-fallthrough": "off",
    "no-func-assign": "error",
    "no-global-assign": "error",
    "no-import-assign": "error",
    "no-inner-declarations": "error",
    "no-invalid-regexp": "error",
    "no-invalid-this": "off",
    "no-irregular-whitespace": "error",
    "no-misleading-character-class": "error",
    "no-new-symbol": "error",
    "no-new-wrappers": "off",
    "no-null/no-null": "off",
    "no-obj-calls": "error",
    "no-octal": "error",
    "no-prototype-builtins": "error",
    "no-redeclare": "error",
    "no-regex-spaces": "error",
    "no-self-assign": "error",
    "no-setter-return": "error",
    "no-shadow": [
      "off",
      {
        hoist: "all",
      },
    ],
    "no-shadow-restricted-names": "error",
    "no-sparse-arrays": "error",
    "no-this-before-super": "error",
    "no-throw-literal": "off",
    "no-undef": "off",
    "no-undef-init": "off",
    "no-underscore-dangle": "off",
    "no-unreachable": "error",
    "no-unsafe-finally": "off",
    "no-unsafe-negation": "error",
    "no-unused-labels": "off",
    "no-useless-catch": "error",
    "no-useless-escape": "error",
    "no-var": "error",
    "no-with": "error",
    "object-shorthand": "off",
    "one-var": ["off", "never"],
    "prefer-arrow/prefer-arrow-functions": "off",
    "prefer-const": "warn",
    "prettier/prettier": "warn",
    "quote-props": ["off", "consistent-as-needed"],
    radix: "off",
    "require-yield": "error",
    "space-before-function-paren": [
      "off",
      {
        anonymous: "never",
        asyncArrow: "always",
        named: "never",
      },
    ],
    "use-isnan": "off",
    "valid-typeof": "off",
    "vue/array-bracket-spacing": "off",
    "vue/arrow-spacing": "off",
    "vue/block-spacing": "off",
    "vue/brace-style": "off",
    "vue/comma-dangle": "off",
    "vue/comment-directive": "error",
    "vue/dot-location": "off",
    "vue/html-closing-bracket-newline": "off",
    "vue/html-closing-bracket-spacing": "off",
    "vue/html-end-tags": "off",
    "vue/html-indent": "off",
    "vue/html-quotes": "off",
    "vue/html-self-closing": "off",
    "vue/jsx-uses-vars": "error",
    "vue/key-spacing": "off",
    "vue/keyword-spacing": "off",
    "vue/max-attributes-per-line": "off",
    "vue/max-len": "off",
    "vue/multiline-html-element-content-newline": "off",
    "vue/mustache-interpolation-spacing": "off",
    "vue/no-async-in-computed-properties": "error",
    "vue/no-dupe-keys": "error",
    "vue/no-duplicate-attributes": "error",
    "vue/no-multi-spaces": "off",
    "vue/no-parsing-error": "error",
    "vue/no-reserved-keys": "error",
    "vue/no-shared-component-data": "error",
    "vue/no-side-effects-in-computed-properties": "error",
    "vue/no-spaces-around-equal-signs-in-attribute": "off",
    "vue/no-template-key": "error",
    "vue/no-textarea-mustache": "error",
    "vue/no-unused-components": "error",
    "vue/no-unused-vars": "error",
    "vue/no-use-v-if-with-v-for": "error",
    "vue/no-v-html": "off",
    "vue/object-curly-spacing": "off",
    "vue/require-component-is": "error",
    "vue/require-prop-type-constructor": "error",
    "vue/require-render-return": "error",
    "vue/require-v-for-key": "error",
    "vue/require-valid-default-prop": "error",
    "vue/return-in-computed-property": "error",
    "vue/script-indent": "off",
    "vue/script-setup-uses-vars": "error",
    "vue/singleline-html-element-content-newline": "off",
    "vue/first-attribute-linebreak": "error",
    "vue/space-infix-ops": "off",
    "vue/space-unary-ops": "off",
    "vue/use-v-on-exact": "error",
    "vue/valid-template-root": "error",
    "vue/valid-v-bind": "error",
    "vue/valid-v-cloak": "error",
    "vue/valid-v-else": "error",
    "vue/valid-v-else-if": "error",
    "vue/valid-v-slot": [
      "error",
      {
        allowModifiers: true,
      },
    ],
    "vue/valid-v-for": "error",
    "vue/valid-v-html": "error",
    "vue/valid-v-if": "error",
    "vue/valid-v-model": "error",
    "vue/valid-v-on": "error",
    "vue/valid-v-once": "error",
    "vue/valid-v-pre": "error",
    "vue/valid-v-show": "error",
    "vue/valid-v-text": "error",
  },
};
